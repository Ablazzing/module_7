ВНИМАНИЕ!!! Этот проект будет проверятся максимально приближенно к коммерческой разработке. 
Новые правила проверки:
Организационные изменения:
1. Вы можете отправить код на проверку в любой момент времени. Ревью будет произведено в течении 24 часов.
2. Этап принимается либо полностью, либо не принимается вообще. Оценка может быть только 3 из 3, либо 0 из 3.
3. Этап можно пересдавать сколько угодно раз, если он не принят.
4. Разрешено приглашать на предварительное ревью другого ученика, который сдал этап(!).
5. (!!!!) Обязательно оформление Merge request в ветку develop. Вы присылаете ссылку на merge request, а не на github проекта(!).

Изменения правил код ревью:
1. Нарушение по код стайлу автоматически ведет к не приемке этапа.
2. Код смотрится целиком, поэтому наличие недописанных методов, классов ведет к не приемке этапа.
3. "Временные", "костыльные", "заглушечные" решения не принимаются и ведут к не приемке этапа.
4. Ошибка при компиляции ведет к не приемке этапа.


Проект "Сервис суточного бронирования квартир и комнат".
Цель проекта: предоставить функционал для агенства недвижимости бронировать квартиры посуточно. 
Агенство недвижимости будет находить собственников квартир(комнат) и предлагать сдавать квартиры посуточно. 
Если собственник соглашается, то его помещение заносится в базу данных. Далее агент формирует объявление, где пишет сколько стоит аренда данной квартиры на сутки, прикрепляя описание.
Объявление размещается на сайте агенства недвижимости и его видят пользователи интернета. Понравившуюся квартиру(комнату) пользователь может забронировать на определенные даты.

Этап №1 - Создание приложения и структуры бд
1. Создать базу данных flat_rent.
2. Создать Spring-boot проект (spring-data-jpa, web, lombok, checkstyle, liquibase, postgresql driver)
3. Настроить подключение к базе из java
4. С помощью скриптов liquibase спроектировать бд. 
У всех колонок НЕ может быть значение null(!).
Не забывайте про создание id у таблиц.
4.1. Помещение (apartment) - город, улица, дом (может быть корпус), количество комнат ( только комната, 1-комнатная, 2-комнатная, 3-комнатная, 4 и более комнатная квартира)
4.2. Объявление (advert) - цена за ночь, статус (активно или архивное), ссылка на помещение, описание
4.3. Клиент (client) - Имя клиента, email клиента (УНИКАЛЬНЫЙ)
4.4. Бронирование (booking) - дата начала бронирования, дата окончания бронирования, ссылка на клиента, ссылка на объявление, стоимость всего бронирования.


Этап №2 - Описание сущностей бд в java и создание типовых репозиториев для работы с ними.
1. Создать классы сущности, описывающие соответствующие сущности из бд: Должны появится классы enity Apartment, Client, Advert, Booking. Данные классы должны отображать всю структуру таблиц.
2. У entity Apartment "количество комнат" должно быть enum.
2. Создать jpa репозитории под каждую entity.
Проверьте что вы можете сохранить экземпляр каждой сущности (после проверки удалите лишний код).


Этап №3 - Создание связи между сущностями
1. Необходимо заменить в классах entity использование полей с id на экземпляры сущностей.
При этом связи должны быть двух сторонние.
Например: из объявления мы можем получить помещение, на которое это объявление ссылается. Из помещения мы можем увидеть все объявления, которые ссылаются на данное помещение.

Как было до (иллюстрация):
Car {
	Integer id;
}

Human {
	Integer car_id;
}

Как должно стать:
Car {
  Integer id
  Human owner;
}

Human {
	Car car;
}
2. При печати (toString) entity не должны появлятся связанные сущности
3. Entity сравниваются друг с другом только по id

Этап №4 - Создание сервисного слоя и мапперов (Без слоя контроллеров!). 
Для маппинга из dto в entity и наоборот должен использоваться только(!) mapstruct.
Необходимо:
0. Подключить mapstruct.
1. Создать сервис по работе с помещениями. Сервис должен уметь:
1.1 Сохранять новое помещение. Формат входящих данных:
{
  "id": null,
  "city": "string",
  "street": "string",
  "house": "string",
  "apartment_type": "ONLY_ROOM"
}
1.1.1 При создании помещения отдавать данные в том же формате, но с заполненным id.

2. Создать сервис по работе с клиентами. Сервис должен уметь:
2.1 Создавать клиента. Формат входящих данных:
{
  "id": null,
  "name": "string",
  "email": "string"
}
2.1.1 При создании клиента отдавать данные в том же формате, но с заполненным id. 

3. Создавать сервис по работе с объявлениями. Сервис должен уметь:
3.1. Создавать новое объявление. Формат входящих данных:
{
  "id": null,
  "price": 0,
  "is_active": true,
  "apartment_id": 0
  "description": "string"
}
3.1.1 Необходимо преобразовать эти данные в advert entity, внутри которой будет лежать apartment entity (получить по id apartment entity, а не создать новую!).
3.1.2 Сохранить advert в бд. Если такого apartment нет, advert не должен быть сохранен.
3.1.3 Отдавать dto после сохранения сущности, в таком формате:
{
  "id": 0,
  "price": 0,
  "is_active": true,
  "apartment": {
    "id": 0,
    "city": "string",
    "street": "string",
    "house": "string",
    "apartment_type": "ONLY_ROOM"
  },
  "description": "string"
}

4. Создать сервис по работе с бронированиями. Сервис должен уметь:
4.1 Создавать бронирование. Формат входящих данных:
{
  "id": null,
  "client_id": 0,
  "advert_id": 0,
  "date_start": "2025-02-13",
  "date_finish": "2025-02-13"
}
4.1.1 Формат данных выходящих:

{
  "id": 0,
  "client": {
    "id": 0,
    "name": "string",
    "email": "string"
  },
  "advert": {
    "id": 0,
    "price": 0,
    "is_active": true,
    "apartment": {
      "id": 0,
      "city": "string",
      "street": "string",
      "house": "string",
      "apartment_type": "ONLY_ROOM"
    },
    "description": "string"
  },
  "date_start": "2025-02-13",
  "date_finish": "2025-02-13",
  "result_price": 0
}
